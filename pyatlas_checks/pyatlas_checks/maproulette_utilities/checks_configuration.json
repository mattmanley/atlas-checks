{
  "CheckResourceLoader":{
    "scanUrls":[
      "org.openstreetmap.atlas.checks.validation",
      "com.apple.geo.osm.integrity.checks"
    ],
    "type":"org.openstreetmap.atlas.checks.base.Check",
    "enabled.value.default":true
  },
  "AbbreviatedNameCheck":{
    "enabled":false
  },
  "AddressPointMatchCheck":{
    "bounds.size":150.0,
    "challenge":{
      "name": "Address Point Match Check",
      "description":"Tasks contain nodes which either have no street name or incorrect street names",
      "blurb":"Nodes without street names, or with incorrect street names",
      "instruction":"Using imagery and local knowledge, determine if the address should be changed",
      "difficulty":"EASY",
      "defaultPriority":"LOW"
    }
  },
  "AddressStreetNameCheck": {
    "search.distance": 100.0,
    "challenge": {
      "name": "Address Street Name Check",
      "description": "Tasks contain nodes with addr:street names that don't match the surrounding roads",
      "blurb": "Nodes with mismatched addr:street names",
      "instruction": "Using imagery and local knowledge, determine if the address should be changed",
      "difficulty": "HARD"
    }
  },
  "AreasWithHighwayTagCheck":{
    "tag.filters":"highway->*&area->yes",
    "challenge":{
      "name": "Areas With Highway Tag Check",
      "description":"A Highway should never be tagged as an area, all these tasks involve highways that have been.",
      "blurb":"Highways should not be tagged as Areas.",
      "instruction":"Remove highway tag from feature with area tag.",
      "difficulty":"EASY",
      "tags":"highway,landuse"
    }
  },
  "ApproximateWayCheck": {
    "deviation": {
      "minimum.meters": 10.0,
      "ratio": {
        "max": 0.12
      }
    },
    "angle": {
      "max": 140.0,
      "min": 60.0
    },
    "bezierStep": 0.01,
    "highway.minimum": "secondary",
    "challenge": {
      "description": "Tasks contain ways that are crudely drawn.",
      "blurb": "Crudely drawn ways",
      "instructions": "Improve the accuracy of the way by adding more nodes and/or readjusting existing nodes to better match the actual road",
      "difficulty": "EASY"
    }
  },
  "BadTagsCheck":{
    "enabled":false
  },
  "BigNodeBadDataCheck":{
    "max.number.paths.threshold":25,
    "max.number.junction.edges.threshold":2,
    "challenge":{
      "name": "Big Node Bad Data Check",
      "description":"Bad data in intersections can create BigNodes that have incredibly high numbers of paths.",
      "blurb":"Big Nodes with bad data have too many paths.",
      "instruction":"Open your favorite editor and edit the intersection.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway", "highway=motorway_link", "highway=trunk", "highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":["highway=primary", "highway=primary_link", "highway=secondary", "highway=secondary_link"]
      }
    },
    "highway.type": {
      "maximum": "motorway",
      "minimum": "toll_gantry"
    }
  },
  "BuildingRoadIntersectionCheck":{
    "car.navigable":true,
    "challenge":{
      "name": "Building-Road Intersections",
      "description":"This challenge identifies where roads and buildings overlap or intersect each other. This is frequently caused by inaccurate digitizing or snapping.",
      "blurb":"Intersecting Buildings and Roads",
      "instruction":"Look at imagery and turn on OSM GPS traces to make sure imagery is properly aligned, then adjust the buildings and/or roads so there is no longer an overlap. In some cases the overlap may be correct, like when a road goes through or under a building; use the appropriate set of tags such as \"covered=yes” or tunnel=yes, layer=-1 and usually tunnel=building_passage to the covered segment of road. In other cases, a road may stop directly at a building, such as a sidewalk or other pedestrian way, in that case mark it as “Not as issue.” In general it’s best to just fix the specific task identified and then go onto the next one.",
      "difficulty":"EASY",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"
        ]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway,building"
    }
  },
  "ConditionalRestrictionCheck": {
    "challenge": {
      "description": "The conditional restriction tag and value should follow a predefined scheme",
      "blurb": "Improper conditional restriction tags",
      "instruction": "Open your favorite editor and check the instruction for the task and then update the conditional tag to the appropriate scheme.",
      "difficulty": "EASY",
      "defaultPriority": "MEDIUM"
    }
  },
  "ConflictingAreaTagCombination":{
    "challenge":{
      "name": "Conflicting Area Tag Combination Check",
      "description":"Task contains Areas with mutually exclusive tag combinations.",
      "blurb":"Conflicting Area Tag Combination",
      "instruction":"Open your favorite editor, check the task instructions and determine if the tags should be changed",
      "difficulty":"EASY"
    }
  },
  "ConflictingTagCombinationCheck":{
    "tags.conflicting.filters": ["highway->*&building->*||route->ferry||natural->*||landuse->*||place->*",
      "service->*&highway->!service&highway->!construction&railway->!&waterway->!canal",
      "motor_vehicle->yes&motorcar->no",
      "motor_vehicle->no&motorcar->yes",
      "motor_vehicle->yes&vehicle->no",
      "motorcar->yes&vehicle->no",
      "motor_vehicle->no&vehicle->yes",
      "motorcar->no&vehicle->yes"],
    "challenge":{
      "name": "Conflicting Tag Combination Check",
      "description":"OSM has numerous tag keys and values. These tags could be combined and used together in the same feature. However, tags might have conflicting values.",
      "blurb":"Verify conflicting tags.",
      "instruction":"Open your favorite editor, check the task instructions and determine if the tags should be changed",
      "difficulty":"EASY"
    }
  },
  "ConnectivityCheck":{
    "nearby.edge.distance.meters":2.0,
    "blacklisted.highway.filter": "highway->no",
    "challenge":{
      "name": "Connectivity Check",
      "description":"This challenge finds roads that are very close to others, but not connected. The goal is to see if they should be connected, and if so, to connect them.",
      "blurb":"Connectivity Check",
      "instruction":"Zoom in to see the roads, and then determine if the roads should be connected using your local knowledge, satellite imagery and street level imagery such as Mapillary, OpenStreetCam or Bing Streetside. If the roads should be connected, connect them together.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "DuplicateLocationInPolyLineCheck":{
    "challenge":{
      "name": "Duplicate Location In Polyline Check",
      "description":"Tasks will include locations that have been repeated within a single polyline.",
      "blurb":"Repeating locations in a polyline",
      "instruction":"Using imagery and local knowledge, determine if the duplicate locations should be removed, so that only a single location remains.",
      "difficulty":"EASY",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "DuplicateNodeCheck":{
    "challenge":{
      "name": "Duplicate Node Check",
      "description":"Tasks contain node locations that have duplicate nodes found.",
      "blurb":"Duplicate Nodes",
      "instruction":"Open your favorite editor and remove one or more of the duplicate nodes until only one remains.",
      "difficulty":"EASY"
    }
  },
  "DuplicatePointCheck":{
    "challenge":{
      "name": "Duplicate Point Check",
      "description":"Tasks contain node locations where duplicate points of interest are found.",
      "blurb":"Duplicate Points",
      "instruction":"Using imagery and local knowledge, determine if one or more of the duplicate points of interest should be removed until only one remains.",
      "difficulty":"EASY"
    }
  },
  "DuplicateWaysCheck":{
    "enabled": false,
    "challenge":{
      "description":"Tasks contain Ways which have been partially or completely duplicated.",
      "blurb":"Duplicate Ways",
      "instruction":"Using imagery and local knowledge, determine if one or more of the duplicated edges in the OSM way should be removed.",
      "difficulty":"EASY"
    }
  },
  "EdgeCrossingEdgeCheck":{
    "minimum.highway.type":"residential",
    "challenge":{
      "name": "Crossing Roads",
      "description":"This challenge finds ways (such as roads) that cross other ways but are not connected to them. The idea is to determine if they should be connected (such as adding a junction)",
      "blurb":"Crossing Ways",
      "instruction":"Use your local knowledge, satellite imagery and street level imagery such as Mapillary, OpenStreetCam or Bing Streetside to determine if the crossing ways should be connected or not.",
      "difficulty":"EASY"
    }
  },
  "FloatingEdgeCheck":{
    "construction.check": true,
    "highway.minimum":"service",
    "length":{
      "maximum.kilometers":100.0,
      "minimum.meters":100.0
    },
    "challenge":{
      "name": "Floating Ways / Disconnected Roads",
      "description":"This challenge finds roads that are \"floating\" or not connected to the rest of the road network. Use imagery to find the right way to connect them together.",
      "blurb":"Connected Edges",
      "instruction":"Using local knowledge, satellite imagery and ground-level imagery, find how the road should be connected to the rest of the road network.",
      "difficulty":"EASY",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "GeneralizedCoastlineCheck": {
    "node.minimum.distance": 100.0,
    "node.minimum.threshold": 30.0,
    "angle.minimum.threshold": 97,
    "coastline.tags.filters": "",
    "challenge": {
      "name": "Generalized Coastline Check",
      "description": "Coastlines whose nodes are too far apart.",
      "blurb": "Ways",
      "instruction": "Open your favorite editor and add more nodes to the coastline.",
      "difficulty": "EASY",
      "defaultPriority": "LOW",
      "tags":"coastline"
    }
  },
  "HighwayClassSmoothingMetricsCheck":{
    "enabled": false
  },
  "HighwayToFerryTagCheck": {
    "highway.type.minimum": "path",
    "challenge": {
      "name": "Highway To Ferry Check",
      "description": "Ferry routes should have a Ferry Tag with a highway classification associated with them. Any ferry routes with a Highway Tag should be updated to a Ferry Tag and the Highway Tag should be dropped. ",
      "blurb": "Improper tags for Ferry routes.",
      "instruction": "Open your favorite editor and check the instruction for the task and then create or modify the Ferry Tag and delete the Highway Tag.",
      "difficulty": "EASY",
      "defaultPriority": "MEDIUM"
    }
  },
  "ImproperAndUnknownRoadNameCheck":{
    "names.improper":["street","express","avenue","drive"],
    "challenge":{
      "name": "Improper And Unknown Road Name Check",
      "description":"Tasks contain roads named as a road type, form of way, a road surface material or the string \"unknown\". These are common mistake in iD.",
      "blurb":"Incorrect road names",
      "instruction":"Open your favorite editor and edit/remove the incorrect names",
      "difficulty":"EASY",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "InconsistentRoadClassificationCheck":{
    "long.edge.threshold":1000.0,
    "minimum.highway.type":"tertiary_link",
    "maximum.direction.change.degrees":30.0,
    "maximum.edge.length":500.0,
    "challenge":{
      "name": "Inconsistent Road Classification Check",
      "description":"Tasks that identify roads, that transition from one classification to another and then back to the original classification. The initial way will be used as reference to find out inconsistency. This check will skip roundabouts by default. Roundabouts take the type of highest priority way connected. However, if a roundabout is not properly tagged (missing junction=roundabout), then it will probably be flagged by this check. The solution is to add junction=roundabout tag and set the highway tag to the highest priority highway tag connecting to junction. Links need to be tagged similar to roundabouts. By default a link way will not be used as reference way. However, link ways could still cause inconsistencies.",
      "blurb":"Classifications that transition back and forth over a road going in a direction.",
      "instruction":"Using local knowledge, imagery and the appropriate local highway classification guidelines, determine if the classification should be changed. If a roundabout is the cause of inconsistency, then tag it with junction=roundabout.",
      "difficulty":"HARD",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "IntersectingBuildingsCheck":{
    "intersection.lower.limit":0.01,
    "challenge":{
      "name": "Intersecting Buildings Check",
      "description":"Buildings that intersect, contain, or overlap each other.",
      "blurb":"Intersecting Buildings",
      "instruction":"Using imagery and local knowledge and OSM GPS traces, determine if the buildings should be corrected by moving them or combining them.",
      "difficulty":"NORMAL",
      "tags":"building"
    }
  },
  "InvalidAccessTagCheck":{
    "tags.filter":"public_transport->!yes&psv->!yes&bus->!yes&emergency->!yes&motor_vehicle->!no&vehicle->!no&motorcar->!no",
    "minimum.highway.type":"residential",
    "challenge":{
      "name": "Invalid Access Tag Check",
      "description":"Tasks containing invalid access tags",
      "blurb":"Invalid Access Tags",
      "instruction":"Using imagery and local knowledge, determine if the invalid access=no tag should be fixed.",
      "difficulty":"NORMAL",
      "tags":"access,highway"
    }
  },
  "InvalidGeometryCheck":{
    "challenge":{
      "name": "Invalid Geometry Check",
      "description":"Invalid Geometry on various map elements that are the result of inexperienced mapping or mistakes",
      "blurb":"Various Map entities that have invalid geometry",
      "instruction":"Using imagery and local knowledge, correct the geometries so that they're valid. Use the accepted OSM format when fixing whatever elements have invalid geometries.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW"
    }
  },
  "InvalidMultiPolygonRelationCheck": {
    "members.one.ignore": true,
    "overlap.points.minimum": 0,
    "overlap.points.maximum": 2000000,
    "challenge": {
      "description": "Tasks containing improperly formed multipolygon relations.",
      "blurb": "Invalid Multipolygon Relations",
      "instruction": "Open your favorite editor and fix the issues listed in the instructions for each multipolygon relation.",
      "difficulty": "HARD"
    }
  },
  "InvalidLanesTagCheck":{
    "lanes.filter":"lanes->1,1.5,2,3,4,5,6,7,8,9,10",
    "challenge":{
      "name": "Invalid Lanes Tag Check",
      "description":"Tasks contain invalid values for the lanes tag.",
      "blurb":"Invalid Lanes Tags",
      "instruction":"Using imagery and local knowledge, change the lanes tag to have a valid and representative value.",
      "difficulty":"EASY",
      "tags":"lanes,highway"
    }
  },
  "InvalidMiniRoundaboutCheck":{
    "valence.minimum":6,
    "challenge":{
      "name": "Invalid Mini Roundabout Check",
      "description":"Tasks containing invalid mini-roundabouts.",
      "blurb":"Invalid Mini-Roundabout Tags",
      "instruction":"Using imagery and local knowledge, change the tags to represent the intersection more accurately.",
      "difficulty":"NORMAL"
    }
  },
  "InvalidPiersCheck": {
    "challenge": {
      "name": "Invalid Piers Check",
      "blurb": "Verify invalid piers.",
      "defaultPriority": "MEDIUM",
      "description": "Piers should have polygon geometry and tags man_made=pier and area=yes",
      "difficulty": "MEDIUM",
      "instruction": "Open your favorite editor and check the instruction for the task to either update the geometry of the way to be a polygon or add area=yes tag or both."
    },
    "highway.type.minimum": {
      "overlapping": "toll_gantry",
      "pier": "toll_gantry"
    }
  },
  "InvalidTurnRestrictionCheck":{
    "challenge":{
      "name": "Invalid Turn Restriction Check",
      "description":"Tasks containing invalid turn restrictions",
      "blurb":"Invalid Turn Restrictions",
      "instruction":"Using imagery and local knowledge, determine if the displayed invalid turn restriction needs to be edited.",
      "difficulty":"HARD",
      "tags":"highway"
    }
  },
  "LineCrossingBuildingCheck":{
    "challenge":{
      "name": "Line Crossing Building Check",
      "description":"The water body has invalid crossings by line item(s).",
      "blurb":"Unless line item is a certain type that can cross water bodies, then it should not cross them.",
      "instruction":"Using imagery and local knowledge, determine whether and how to fix the issue with the invalid crossing.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"building"
    }
  },
  "LineCrossingWaterBodyCheck":{
    "highway.minimum": "path",
    "highways.exclude": [
      "bus_guideway"
    ],
    "lineItems.offending": "railway->rail,narrow_gauge,preserved,subway,disused,monorail,tram,light_rail,funicular,construction,miniature",
    "lineItems.non_offending": "waterway->*|boundary->*|landuse->*|bridge->yes,viaduct,aqueduct,boardwalk,covered,low_water_crossing,movable,suspension|tunnel->yes,culvert,building_passage|embankment->yes|location->underwater,underground|power->line,minor_line|man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|winter_road->yes|snowmobile->yes|ski->yes|ford->!no&ford->*",
    "nodes.intersecting.non_offending": "ford->!no&ford->*|leisure->slipway|amenity->ferry_terminal",
    "buildings.flag": true,
    "challenge": {
      "name": "Line Crossing Water Body Check",
      "description": "Certain OSM features should not cross waterbodies. Investigate the flagged features and determine if they should be edited, if other tags are needed, or if there is not an error.",
      "blurb": "Edit features overlapping the waterbody so they either validly overlap or do not overlap.",
      "instruction": "Open your favorite editor and determine if the features overlapping the waterbody should be edited, so they either validly overlap or do not overlap.",
      "difficulty": "EASY"
    },
    "shapepoints.min": 1,
    "shapepoints.max": 5000
  },
  "LongSegmentCheck":{
    "length.minimum.kilometers":10.0,
    "challenge":{
      "name": "Long Segment Check",
      "description":"A long segment is a segment that is more than 10 kilometers long. Very long segments may not represent actual roads.",
      "blurb":"Very long segments may not represent actual roads.",
      "instruction":"Open your favorite editor and check if the segment should be split into smaller segments or removed.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "MalformedRoundaboutCheck" :{
    "traffic.countries.left":["AIA", "ATG", "AUS", "BGD", "BHS", "BMU", "BRB", "BRN", "BTN", "BWA",
      "CCK", "COK", "CXR", "CYM", "CYP", "DMA", "FJI", "FLK", "GBR", "GGY", "GRD",
      "GUY", "HKG", "IDN", "IMN", "IND", "IRL", "JAM", "JEY", "JPN", "KEN", "KIR",
      "KNA", "LCA", "LKA", "LSO", "MAC", "MDV", "MLT", "MOZ", "MSR", "MUS", "MWI",
      "MYS", "NAM", "NFK", "NIU", "NPL", "NRU", "NZL", "PAK", "PCN", "PNG", "SGP",
      "SGS", "SHN", "SLB", "SUR", "SWZ", "SYC", "TCA", "THA", "TKL", "TLS", "TON",
      "TTO", "TUV", "TZA", "UGA", "VCT", "VGB", "VIR", "WSM", "ZAF", "ZMB", "ZWE"],
    "challenge":{
      "name": "Malformed Roundabout Check",
      "description":"This check flags roundabouts with issues -- for example, the traffic goes the wrong direction, they are not complete circles, there is a oneway=no tag, or a straight line is tagged as a roundabout. The idea is to either fix the issue or remove the junction=roundabout tag, whichever is correct.",
      "blurb":"Malformed roundabouts",
      "instruction":"Examine the mapping and tagging on the roundabout, and use your local knowledge, satellite or street level imagery to determine whether it is wrong. If the traffic goes the wrong direction, fix it, if the roundabout is not a complete circle but should be, add the ways to be a circle, and add a junction=roundabout tag if appropriate. If it should not be a roundabout, remove the junction=roundabout tag. If there is a oneway=no tag determine if there should be, or if not, remove the junction=roundabout tag.",
      "difficulty":"MEDIUM"
    }
  },
  "MissingISOCountryTagCheck":{
    "enabled":false
  },
  "MissingPrimaryNameCheck":{
    "tags.filter":"highway->*",
    "challenge":{
      "name": "Test_MissingPrimaryNameCheck_12",
      "description":"These tasks include features that are tagged with name tag variants, but don't have a common or localized name tag yet.",
      "blurb":"Pick the best name.",
      "instruction":"Open your favorite editor and check the instruction for the task. Pick the best name tag variant to create a name tag from. If the feature has localized name tag variants, create localized name tags instead.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "MixedCaseNameCheck":{
    "check_name.countries":["AIA", "ATG", "AUS", "BHS", "BRB", "BLZ", "BMU", "BWA", "VGB",
      "CMR", "CAN", "CYM", "DMA", "FJI", "GMB", "GHA", "GIB", "GRD", "GUY", "IRL", "JAM",
      "KEN", "LSO", "MWI", "MLT", "MUS", "MSR", "NAM", "NZL", "NGA", "PNG", "SYC", "SLE",
      "SGP", "SLB", "ZAF", "SWZ", "TZA", "TON", "TTO", "TCA", "UGA", "GBR", "USA", "VUT",
      "ZMB", "ZWE"],
    "name":{
      "language.keys":["name:en"],
      "affixes":["Mc", "Mac", "Mck","Mhic", "Mic"],
      "articles":["a", "an", "the"],
      "prepositions":["and", "from", "to", "of", "by", "upon", "on", "off", "at", "as",
        "into", "like", "near", "onto", "per", "till", "up", "via", "with", "for", "in"],
      "units":["kv"]
    },
    "regex.split":" -/&@–",
    "challenge":{
      "name": "Mixed Case Name Check",
      "description":"Tasks containing objects with mixed case names.",
      "blurb":"Mixed Case Name",
      "instruction":"Using local knowledge and street-level imagery, correct the listed names tags so they conform to capitalization standards",
      "difficulty":"MEDIUM"
    }
  },
  "MalformedPolyLineCheck":{
    "challenge":{
      "name": "Malformed Polyline Check",
      "description":"Tasks containing lines that have only one point, or none, and the ones that are too long or too short. A line is considered too long if it is longer than 500km and too short if is shorter than 1m. Coastlines and Rivers are excluded.",
      "blurb":"Polylines that are malformed.",
      "instruction":"Open your favorite editor, remove unnecessary nodes if required. Split way into multiple ways so that the way is not too long, or increase the length of a way if it is less than 1m.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "MultiPolygonClosedLoopCheck":{
    "layer":"water",
    "challenge":{
      "description":"Verify that the multi polygon relation members (ways) forms a closed polygon.",
      "blurb":"This multi polygon relation has members (disconnected ways) that do not form a closed polygon.",
      "instruction":"Using local knowledge and imagery verify the issue and if needed, connect the ways to form a closed polygon.",
      "difficulty":"NORMAL"
    }
  },
  "NodeValenceCheck":{
    "connections.maximum":10,
    "challenge":{
      "description":"Tasks with nodes are not connected to too many edges. It is considered to have too many edges if it contains more than 10 connections.",
      "blurb":"Nodes with too many edges.",
      "instruction":"Open your favorite editor and disconnect edges to the node.",
      "difficulty":"EXPERT"
    }
  },
  "OneMemberRelationCheck":{
    "tags.filter": "type->!person&type->!multipolygon",
    "challenge":{
      "description":"Tasks containing relations with only one member.",
      "blurb":"One Member Relations",
      "instruction":"Correct the relation to add necessary members",
      "difficulty":"HARD"
    }
  },
  "OrphanNodeCheck":{
    "enabled":false
  },
  "OverlappingAOIPolygonCheck":{
    "aoi.tags.filters":["amenity->FESTIVAL_GROUNDS", "amenity->GRAVE_YARD|landuse->CEMETERY",
      "boundary->NATIONAL_PARK,PROTECTED_AREA|leisure->NATURE_RESERVE,PARK",
      "historic->BATTLEFIELD", "landuse->FOREST|natural->WOOD",
      "landuse->RECREATION_GROUND|leisure->RECREATION_GROUND",
      "landuse->VILLAGE_GREEN|leisure->PARK", "leisure->GARDEN",
      "leisure->GOLF_COURSE|sport->GOLF", "leisure->PARK&name->*", "natural->BEACH",
      "tourism->ZOO"],
    "intersect.minimum.limit":0.01,
    "challenge":{
      "description":"Tasks containing overlapping AOI ways",
      "blurb":"Overlapping AOI Polygon",
      "instruction":"Correct the areas as necessary to not have overlapping ways representing the same AOI",
      "difficulty":"HARD"
    }
  },
  "OverlappingEdgeCheck":{
    "highway.priority.minimum":"residential",
    "pedestrian.areas.filter": true,
    "challenge":{
      "name": "Overlapping Ways",
      "description":"This challenge flags overlapping edges, often duplicated ways, where there are multiple roads mapped overlapping each other. This is frequently caused by inaccurate mapping or not splitting roads at their intersections.",
      "blurb":"Overlapping Highways",
      "instruction":"The duplicated way may not always be visible at first -- it may be under an existing way. First click on roads that intersect the main road and see if the overlap is apparently from what is selected. If not, try disconnecting or dragging a node to see if you can spot where the overlapping roads are (be careful of breaking any relations on the ways before doing this). Then delete the overlapping feature, making sure to keep the correct road tags and relations. If there is a pedestrian area overlapping a road, you can mark it as 'already fixed' or 'not an issue.' In general it’s best to just fix the specific task identified and then go onto the next one.",
      "difficulty":"EASY",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"
        ]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":["highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"]
      }
    }
  },
  "PedestrianAreaOverlappingEdgeCheck": {
    "challenge": {
      "name": "Pedestrian Area Overlapping Edge Check",
      "blurb": "Pedestrian areas overlapping car navigable ways.",
      "defaultPriority": "MEDIUM",
      "description": "Tasks contain pedestrian areas overlapping car navigable ways that are not properly snapped to those ways.",
      "difficulty": "MEDIUM",
      "instruction": "Open your favorite editor and check the instruction for the task and then properly snap all points of intersection of the pedestrian area to the overlapping car navigable ways."
    },
    "distance.minimum.meters": 5
  },
  "PoolSizeCheck":{
    "surface":{
      "maximum":1000.0,
      "minimum":50.0
    }
  },
  "RoadLinkCheck":{
    "length.maximum.miles":1.0,
    "challenge":{
      "name": "Road Link Check",
      "description":"This challenge flags places where highway links, which are slip roads, ramps or physically separated or channelised connecting links, do not match the highway classification of the roads they connect. OSM guidelines say the highway links should be the same classification as the highest road in the intersection. For example, if a primary has a link to a motorway, it should be tagged “motorway_link.” More info on highway links: https://wiki.openstreetmap.org/wiki/Highway_link",
      "blurb":"Check for invalid classes in connected ways.",
      "instruction":"Identify which is the highest classification of road and change the highway links that join those roads to match them — for example, if it’s a primary connecting to a trunk, the link should be trunk_link. In general it’s best to just fix the specific way identified and then go onto the next one.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "RoadNameGapCheck": {
    "valid.highway.tag": [
      "primary",
      "secondary",
      "tertiary",
      "trunk",
      "motorway"
    ],
    "challenge": {
      "description": "identifies Edges with no name Tag that are between two other Edges with the same name Tag, OR the Edge has a name Tag but does not equal the name Tag of the Edges that it is between.",
      "blurb": "Flag the Edge with different name tag or no name tag which is between the same name tag edges",
      "instruction": "Open your favorite editor and edit or add the name tag of the flagged edge(s) so they're consistent with connecting edges with same name tag.",
      "difficulty": "EASY",
      "tags": "highway"
    }
  },
  "RoadNameSpellingConsistencyCheck": {
    "challenge": {
      "name": "Road Name Spelling Consistency Check",
      "blurb": "Edit the name tags of flagged road segments so they're consistent with one another.",
      "description": "Segments of a given road should all have the same, correct spelling.",
      "difficulty": "EASY",
      "instruction": "Open your favorite editor and edit the name tags of the flagged way(s) so they're consistent with those of other ways of the same road."
    },
    "distance.search.maximum": 380
  },
  "RoundaboutClosedLoopCheck":{
    "enabled": false,
    "challenge":{
      "description":"A roundabout should be formed by one-way edges with no dead-end nodes.",
      "blurb":"Modify roundabouts such that they are well formed.",
      "instruction":"Open your favorite editor and using imagery and local knowledge, fix the issue with the roundabout.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "RoundaboutMissingTagCheck": {
    "enabled": false,
    "angle.threshold": {
      "maximum_degree": 40.0,
      "minimum_degree": 10.0
    },
    "challenge": {
      "description": "This check is to look for suspicious circular junctions that may be roundabout without the “junction=roundabout” tag.",
      "blurb": "Modify roundabouts such that they have proper tagging.",
      "instruction": "Open your favorite editor and add junction=roundabout tag.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "tags":"highway"
    }
  },
  "RoundaboutValenceCheck":{
    "connections.minimum":2.0,
    "challenge":{
      "description":"Verify that the valence of the roundabout is sensible.",
      "blurb":"Modify Polyline intersections with the roundabout edges",
      "instruction":"Open your favorite editor and move modify polyline intersections with the roundabout.",
      "difficulty":"NORMAL"
    }
  },
  "SelfIntersectingPolylineCheck":{
    "tags.filter":"highway->*&highway->!construction&highway->!footway&highway->!path|building->*",
    "minimum.highway.type":"service",
    "challenge":{
      "name": "Self Intersecting Polyline Check",
      "description":"Verify that the same Polyline does not intersect itself at any point.",
      "blurb":"Modify Polylines such that they do not self intersect.",
      "instruction":"Open your favorite editor and move the polylines such that they are not self intersecting anymore.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "ShadowDetectionCheck": {
    "challenge": {
      "description": "Verify the height and level tags to make sure the building does not float in 3D",
      "blurb": "Fix floating buildings",
      "instruction": "Open your favorite editor and check the height and placement of the building or building part for 3D alignment.",
      "difficulty": "NORMAL"
    }
  },
  "SharpAngleCheck":{
    "threshold.degrees":160.0,
    "challenge":{
      "name": "Sharp Angle Roads",
      "description":"This challenge identifies roads that have very sharp angles in them, which may be due to inaccurate digitizing or not as many vertices or corners as needed, or due to tiny snags in the road causing a few sharp angles. Using imagery, adjust the angles to be more gradual or smooth.",
      "blurb":"Modify angles that are too acute for rendering.",
      "instruction":"Redraw the road angles to be more gradual, accurate and smooth. Make sure to check imagery alignment too using OSM GPS traces. In some cases you may not see the issue at first, you may need to pan and zoom in closely to find the sharp angle. The point marker symbols on MapRoulette will help guide you — some of the sharp angles are tiny snags or jogs in the road created during digitizing. If the sharp angle is actually correct, mark it as “Not an issue” and move on. It’s also recommended that you turn on OSM GPS traces to ensure proper alignment. And in general it’s best to just fix the specific task identified and then go onto the next one.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      }
    }
  },
  "ShortSegmentCheck":{
    "edge.length.maximum.meters":1.0,
    "node.valence.minimum":3,
    "highway.priority.minimum":"service",
    "challenge":{
      "name": "Short Segment Check",
      "description":"A short segment is a segment that is less than 1 meter. A short segment should not be dead-end. Also a short segment with 2 connections should be investigated to see if segment is really needed.",
      "blurb":"Segments with less 1 meter length should not be dead end.",
      "instruction":"Open your favorite editor and fix the issue with the short segment.",
      "difficulty":"NORMAL",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      }
    }
  },
  "ShortNameCheck":{
    "non.latin.countries":["AFG",
      "ARE", "ARM", "BGD", "BGR", "BHR", "BIH", "BLR", "BRN", "BTN", "CHN", "COM", "CYP",
      "DJI", "DZA", "EGY", "ERI", "ESH", "ETH", "GEO", "GRC", "HKG", "IND", "IRN", "IRQ",
      "ISR", "JOR", "JPN", "KAZ", "KGZ", "KHM", "KOR", "KWT", "LAO", "LBN", "LBY", "LKA",
      "MAC", "MAR", "MDA", "MDV", "MKD", "MMR", "MNE", "MNG", "MRT", "MYS", "NPL", "OMN",
      "PAK", "PRK", "PSE", "QAT", "RUS", "SAU", "SDN", "SGP", "SOM", "SRB", "SYR", "TCD",
      "THA", "TJK", "TUN", "TWN", "TZA", "UKR", "YEM"],
    "length.maximum":2,
    "non.latin.length.maximum":1
  },
  "SignPostCheck":{
    "link":{
      "length.minimum.meters": 50.0,
      "branch.check": true
    },
    "source.filter": "highway->motorway,trunk",
    "ramp.filter": "highway->motorway_link,trunk_link",
    "destination_tag.filter": "destination->*|destination:street->*|destination:backward->*|destination:forwards->*",
    "challenge":{
      "name": "Sign Post Check",
      "description":"Tasks contain nodes where sign post tagging could be missing.  In particular it looks for motorway and trunk ways which have a link edge exiting them.  A task is generated if either the connecting node is missing the motorway_junction tag or the exiting segment is missing the destination tag.",
      "blurb":"Missing sign post tags",
      "instruction":"Either add the missing motorway_junction tag to the identified node and / or the destination tag to the exiting link segment.",
      "difficulty":"NORMAL",
      "defaultPriority":"MEDIUM",
      "tags":"highway"
    }
  },
  "SingleSegmentMotorwayCheck": {
    "challenge": {
      "name": "Single Segment Check",
      "description": "Tasks that identify ways tagged with highway=motorway that are not connected to any ways tagged the same.",
      "blurb": "Fix disconnected motorways.",
      "instruction": "Open your favorite editor and check whether the way should be tagged as highway=motorway.",
      "difficulty": "NORMAL"
    }
  },
  "SinkIslandCheck":{
    "minimum.highway.type": "service",
    "tree.size":50,
    "challenge":{
      "name": "Sink Islands & Impossible Routing",
      "description":"This challenge finds areas that are impossible to navigate or route into or out out. This may be due to incorrect one way roads, missing connections, or other issues. Use your local knowledge, imagery and street level imagery to fix them.",
      "blurb":"Identify islands of roads.",
      "instruction":"Find why the area is impossible to route into or out of. This may be due to incorrect one way tags, roads that aren't connected, one way roads into an area without a way out, or other issues. To solve them, use your local knowledge, check satellite imagery and refer to street level imagery such as Mapillary, OpenStreetCam or Bing Streetside. If you can't determine how to fix an issue, skip it.",
      "difficulty":"EASY",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "SpikyBuildingCheck": {
    "spiky.angle.maximum": 15.0,
    "curve": {
      "degrees": {
        "maximum.single_heading_change": 25.0,
        "minimum.total_heading_change": 10.0
      },
      "points.minimum": 4
    },
    "challenge": {
      "name": "Spiky Building Check",
      "description": "Find buildings with sharp angles in their geometry, which may be due to poor digitization",
      "blurb": "Fix buildings with spiky geometry",
      "instruction": "Open your favorite editor and using imagery, validate that the buildings are mapped correctly",
      "difficulty": "NORMAL",
      "tags":"building"
    }
  },
  "StreetNameIntegersOnlyCheck":{
    "name.keys.filter":["name","name:left","name:right"],
    "character.single.ignore": true,
    "challenge":{
      "description":"Tasks containing name tags with only integers",
      "blurb":"Street Names Integers Only",
      "instruction":"Correct the road with only integers for names.",
      "difficulty":"Medium",
      "tags":"highway,name"
    }
  },
  "SnakeRoadCheck":{
    "challenge":{
      "name": "Test_SnakeRoad_Check_22",
      "description":"Tasks will include ways that are drawn as a single way, when in reality they should be two or more distinct ways",
      "blurb":"Snake Roads",
      "instruction":"Open your favorite editor and split the snake road into two or more distinct ways. You can do this by splitting or separating the existing way at an intersection or where you think a road should end. This check also flags roundabouts that aren’t properly tagged. If you see that’s the case - add a junction=roundabout tag when needed.",
      "difficulty":"MEDIUM",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      },
      "tags":"highway"
    }
  },
  "UnusualLayerTagsCheck":{
    "challenge":{
      "name": "Unusual Layer Tags Check",
      "description":"Tunnels (negative), junctions (zero) and bridges (zero or positive) should have meaningful layer tags attached to them. A missing layer tag implies layer value 0. If there is an explicit layer tag, then it must be between -5 and 5.",
      "blurb":"Verify unusual layer tags.",
      "instruction":"Open your favorite editor, check the instruction for the task and then modify the tag that is considered unusual or possibly invalid.",
      "difficulty":"EASY"
    }
  },
  "UnusualTagCheck":{
    "challenge":{
      "description":"These tasks will be one of three types of tasks. 1) The tags in the entity contains words that are considered forbidden. 2) The maxspeed for the roads are invalid, so possibly something like 20;30 mph instead of simply 20mph and 3) The lanes tag is invalid, Lane tags can only have an integer value applied to it.",
      "blurb":"Verify unusual tags.",
      "instruction":"Open your favorite editor, check the instruction for the task and then modify the tag that is considered unusual or possibly invalid.",
      "difficulty":"EASY"
    }
  },
  "UnwalkableWaysCheck":{
    "includeDualCrossingDualCarriageways":false,
    "challenge":{
      "name": "Unwalkable Ways Check",
      "description":"Intersections with dual carriageways can cause foot traffic routing issues.",
      "blurb":"Should be marked foot=yes or foot=no",
      "instruction":"Should be marked as foot=yes or foot=no",
      "difficulty":"EASY"
    }
  },
  "ValenceOneImportantRoadCheck":{
    "challenge":{
      "name": "Valence One Important Road Check",
      "description":"Tasks containing high classification roads that start and/or end disconnected from the surrounding road network.",
      "blurb":"Valence-1 Important Road",
      "instruction":"Open your favorite editor and add/correct connecting ways to continue the highway, add/correct a corresponding link to connect the highway to a different class road network, or reverse digitization to correct one-way direction.",
      "difficulty":"Normal",
      "defaultPriority":"LOW",
      "highPriorityRule":{
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule":{
        "condition":"OR",
        "rules":[
          "highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"
        ]
      }
    }
  },
  "WaterbodyAndIslandSizeCheck":{
    "surface":{
      "waterbody.minimum.meters":10.0,
      "waterbody.maximum.kilometers":370000.0,
      "island.minimum.meters":10.0,
      "island.maximum.kilometers":2170000.0,
      "islet.minimum.meters":10.0,
      "islet.maximum.kilometers":1.0
    },
    "challenge":{
      "name": "Waterbody And Island Size Check",
      "description":"This tasks contains waterboadies and islands which are either too small or too large in size.",
      "blurb":"Waterbodies and Islands that are too large, or too small",
      "instruction":"Open your favorite editor and examine if the waterbody or island is correctly tagged and mapped.",
      "difficulty":"NORMAL",
      "defaultPriority":"MEDIUM"
    }
  },
  "OceanBleedingCheck": {
    "ocean": {
      "valid": "natural->strait,channel,fjord,sound,bay|harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock",
      "invalid": "man_made->breakwater,pier|natural->beach,marsh,swamp|water->marsh|wetland->bog,fen,mangrove,marsh,saltern,saltmarsh,string_bog,swamp,wet_meadow|landuse->*",
      "boundary": "natural->coastline"
    },
    "highway": {
      "minimum": "path",
      "exclude": [
        "bus_guideway"
      ]
    },
    "lineItems.offending": "railway->rail,narrow_gauge,preserved,subway,disused,monorail,tram,light_rail,funicular,construction,miniature",
    "challenge": {
      "name": "Line Crossing Ocean Check",
      "description": "Certain OSM features should not cross oceans. Investigate the flagged features and determine if they should be edited, if other tags are needed, or if there is not an error.",
      "blurb": "Edit features overlapping the ocean feature so they either validly intersect or do not overlap.",
      "instruction": "Open your favorite editor and determine if the features overlapping the ocean should be edited, so they either validly overlap or do not overlap.",
      "difficulty": "EASY"
    }
  },
  "InvalidTagsCheck": {
    "filters.resource.override": true,
    "filters.classes.tags": [
      ["area","boundary->protected_area&protect_class->!"],
      ["relation","boundary->protected_area&protect_class->!"]
    ],
    "challenge": {
      "description": "Tasks containing features with tags containing missing, conflicting, or incorrect values",
      "blurb": "Features with invalid tags",
      "instruction": "Open your favorite editor and check that the listed tags are correct.",
      "difficulty": "Medium",
      "tags":"tags"
    }
  }
}
